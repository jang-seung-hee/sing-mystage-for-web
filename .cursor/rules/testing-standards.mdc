---
globs: *.test.ts,*.test.tsx,*.spec.ts,*.spec.tsx
description: 테스트 작성 표준 및 테스트 전략
---

# 테스트 작성 표준

## 테스트 파일 구조

### 파일 네이밍 규칙
- **컴포넌트 테스트**: `ComponentName.test.tsx`
- **서비스 테스트**: `serviceName.test.ts`
- **유틸리티 테스트**: `utilityName.test.ts`
- **통합 테스트**: `integration.test.ts`

### 테스트 파일 위치
```
src/
├── components/
│   ├── Player/
│   │   ├── Player.tsx
│   │   └── Player.test.tsx
│   └── Search/
│       ├── SearchBar.tsx
│       └── SearchBar.test.tsx
├── services/
│   ├── youtubeApi.ts
│   └── youtubeApi.test.ts
└── __tests__/
    ├── setup.ts
    └── utils/
        ├── testUtils.ts
        └── mockData.ts
```

## React 컴포넌트 테스트

### 기본 컴포넌트 테스트
```typescript
// Player.test.tsx
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Player } from './Player';

// Mock 데이터
const mockVideo = {
  id: 'test-video-id',
  title: 'Test Video',
  thumbnail: 'https://example.com/thumb.jpg',
  duration: '3:45'
};

// Props 인터페이스 정의
interface PlayerProps {
  videoId: string;
  isPlaying: boolean;
  onPlayPause: (isPlaying: boolean) => void;
}

describe('Player Component', () => {
  const defaultProps: PlayerProps = {
    videoId: mockVideo.id,
    isPlaying: false,
    onPlayPause: jest.fn()
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('비디오 ID를 올바르게 표시해야 한다', () => {
    render(<Player {...defaultProps} />);
    
    // iframe이 올바른 src를 가지는지 확인
    const iframe = screen.getByTitle(/youtube video player/i);
    expect(iframe).toHaveAttribute('src', expect.stringContaining(mockVideo.id));
  });

  it('재생/일시정지 버튼을 클릭하면 콜백이 호출되어야 한다', async () => {
    render(<Player {...defaultProps} />);
    
    const playButton = screen.getByRole('button', { name: /play/i });
    fireEvent.click(playButton);
    
    await waitFor(() => {
      expect(defaultProps.onPlayPause).toHaveBeenCalledWith(true);
    });
  });

  it('재생 중일 때 일시정지 버튼을 표시해야 한다', () => {
    render(<Player {...defaultProps} isPlaying={true} />);
    
    expect(screen.getByRole('button', { name: /pause/i })).toBeInTheDocument();
    expect(screen.queryByRole('button', { name: /play/i })).not.toBeInTheDocument();
  });
});
```

### 비동기 작업 테스트
```typescript
// SearchResults.test.tsx
import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import { SearchResults } from './SearchResults';
import * as youtubeApi from '../../services/youtubeApi';

// API 모킹
jest.mock('../../services/youtubeApi');
const mockSearchYouTube = youtubeApi.searchYouTube as jest.MockedFunction<typeof youtubeApi.searchYouTube>;

describe('SearchResults Component', () => {
  const mockResults = [
    {
      id: 'video1',
      title: 'Test Video 1',
      thumbnail: 'thumb1.jpg',
      duration: '3:45'
    },
    {
      id: 'video2',
      title: 'Test Video 2',
      thumbnail: 'thumb2.jpg',
      duration: '4:20'
    }
  ];

  it('검색 결과를 올바르게 렌더링해야 한다', async () => {
    mockSearchYouTube.mockResolvedValue(mockResults);

    render(<SearchResults query="test query" />);

    // 로딩 상태 확인
    expect(screen.getByText(/검색 중/i)).toBeInTheDocument();

    // 검색 결과 확인
    await waitFor(() => {
      expect(screen.getByText('Test Video 1')).toBeInTheDocument();
      expect(screen.getByText('Test Video 2')).toBeInTheDocument();
    });

    expect(mockSearchYouTube).toHaveBeenCalledWith('test query');
  });

  it('검색 실패 시 에러 메시지를 표시해야 한다', async () => {
    mockSearchYouTube.mockRejectedValue(new Error('API Error'));

    render(<SearchResults query="test query" />);

    await waitFor(() => {
      expect(screen.getByText(/검색에 실패했습니다/i)).toBeInTheDocument();
    });
  });
});
```

## 서비스 레이어 테스트

### API 서비스 테스트
```typescript
// youtubeApi.test.ts
import { searchYouTube, getStreamUrl } from './youtubeApi';
import { httpsCallable } from 'firebase/functions';
import { functions } from '../firebase';

// Firebase Functions 모킹
jest.mock('firebase/functions');
const mockHttpsCallable = httpsCallable as jest.MockedFunction<typeof httpsCallable>;

describe('YouTube API Service', () => {
  const mockSearchFunction = jest.fn();
  const mockStreamFunction = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    mockHttpsCallable.mockImplementation((functions, functionName) => {
      if (functionName === 'searchYouTube') {
        return mockSearchFunction;
      } else if (functionName === 'getAdFreeStreamUrl') {
        return mockStreamFunction;
      }
      return jest.fn();
    });
  });

  describe('searchYouTube', () => {
    it('검색 쿼리를 올바르게 전달해야 한다', async () => {
      const mockResults = [{ id: '1', title: 'Test Video' }];
      mockSearchFunction.mockResolvedValue({ data: mockResults });

      const result = await searchYouTube('test query');

      expect(mockSearchFunction).toHaveBeenCalledWith({ query: 'test query' });
      expect(result).toEqual(mockResults);
    });

    it('API 에러를 적절히 처리해야 한다', async () => {
      mockSearchFunction.mockRejectedValue(new Error('API Error'));

      await expect(searchYouTube('test query')).rejects.toThrow('동영상 검색에 실패했습니다');
    });
  });

  describe('getStreamUrl', () => {
    it('비디오 ID를 올바르게 전달해야 한다', async () => {
      const mockUrl = 'https://example.com/stream';
      mockStreamFunction.mockResolvedValue({ data: { url: mockUrl } });

      const result = await getStreamUrl('video123');

      expect(mockStreamFunction).toHaveBeenCalledWith({ videoId: 'video123' });
      expect(result).toBe(mockUrl);
    });
  });
});
```

## 훅 테스트

### 커스텀 훅 테스트
```typescript
// useAuth.test.ts
import { renderHook, act } from '@testing-library/react';
import { useAuth } from './useAuth';
import * as firebaseAuth from 'firebase/auth';

// Firebase Auth 모킹
jest.mock('firebase/auth');
const mockSignInWithEmailAndPassword = firebaseAuth.signInWithEmailAndPassword as jest.MockedFunction<typeof firebaseAuth.signInWithEmailAndPassword>;

describe('useAuth Hook', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('로그인이 성공하면 사용자 정보를 반환해야 한다', async () => {
    const mockUser = {
      uid: 'user123',
      email: 'test@example.com',
      displayName: 'Test User'
    };

    mockSignInWithEmailAndPassword.mockResolvedValue({
      user: mockUser as any
    });

    const { result } = renderHook(() => useAuth());

    await act(async () => {
      await result.current.login('test@example.com', 'password');
    });

    expect(result.current.user).toEqual(mockUser);
    expect(result.current.isLoading).toBe(false);
  });

  it('로그인 실패 시 에러를 처리해야 한다', async () => {
    mockSignInWithEmailAndPassword.mockRejectedValue(new Error('Invalid credentials'));

    const { result } = renderHook(() => useAuth());

    await act(async () => {
      await expect(result.current.login('test@example.com', 'wrong')).rejects.toThrow();
    });

    expect(result.current.user).toBeNull();
    expect(result.current.isLoading).toBe(false);
  });
});
```

## 통합 테스트

### E2E 시나리오 테스트
```typescript
// integration.test.tsx
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
import { MainPage } from '../pages/MainPage';
import * as youtubeApi from '../services/youtubeApi';

// 전체 앱 모킹
jest.mock('../services/youtubeApi');
jest.mock('firebase/auth');

const renderWithRouter = (component: React.ReactElement) => {
  return render(
    <BrowserRouter>
      {component}
    </BrowserRouter>
  );
};

describe('MainPage Integration Tests', () => {
  const mockSearchResults = [
    {
      id: 'video1',
      title: 'Test Song 1',
      thumbnail: 'thumb1.jpg',
      duration: '3:45'
    }
  ];

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('검색부터 재생까지 전체 플로우가 작동해야 한다', async () => {
    // API 모킹
    (youtubeApi.searchYouTube as jest.Mock).mockResolvedValue(mockSearchResults);

    renderWithRouter(<MainPage />);

    // 1. 검색어 입력
    const searchInput = screen.getByPlaceholderText(/검색어를 입력하세요/i);
    fireEvent.change(searchInput, { target: { value: 'test song' } });

    // 2. 검색 버튼 클릭
    const searchButton = screen.getByRole('button', { name: /검색/i });
    fireEvent.click(searchButton);

    // 3. 검색 결과 확인
    await waitFor(() => {
      expect(screen.getByText('Test Song 1')).toBeInTheDocument();
    });

    // 4. 비디오 선택
    const videoCard = screen.getByText('Test Song 1');
    fireEvent.click(videoCard);

    // 5. 플레이어가 로드되는지 확인
    await waitFor(() => {
      expect(screen.getByTitle(/youtube video player/i)).toBeInTheDocument();
    });
  });
});
```

## 테스트 유틸리티

### 테스트 헬퍼 함수
```typescript
// testUtils.ts
import React from 'react';
import { render, RenderOptions } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';

// Firebase Auth 컨텍스트 모킹
const MockAuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  return <div data-testid="mock-auth-provider">{children}</div>;
};

// 커스텀 렌더 함수
const customRender = (
  ui: React.ReactElement,
  options?: Omit<RenderOptions, 'wrapper'>
) => {
  return render(ui, {
    wrapper: ({ children }) => (
      <BrowserRouter>
        <MockAuthProvider>
          {children}
        </MockAuthProvider>
      </BrowserRouter>
    ),
    ...options
  });
};

// Mock 데이터 생성기
export const createMockVideo = (overrides = {}) => ({
  id: 'test-video-id',
  title: 'Test Video',
  thumbnail: 'https://example.com/thumb.jpg',
  duration: '3:45',
  publishedAt: '2023-01-01T00:00:00Z',
  ...overrides
});

export const createMockUser = (overrides = {}) => ({
  uid: 'test-user-id',
  email: 'test@example.com',
  displayName: 'Test User',
  ...overrides
});

export * from '@testing-library/react';
export { customRender as render };
```

## 테스트 설정

### Jest 설정
```javascript
// jest.config.js
module.exports = {
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/src/setupTests.ts'],
  moduleNameMapping: {
    '^@/(.*)$': '<rootDir>/src/$1',
    '\\.(css|less|scss|sass)$': 'identity-obj-proxy'
  },
  collectCoverageFrom: [
    'src/**/*.{ts,tsx}',
    '!src/**/*.d.ts',
    '!src/index.tsx',
    '!src/reportWebVitals.ts'
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80
    }
  }
};
```

### 테스트 설정 파일
```typescript
// setupTests.ts
import '@testing-library/jest-dom';

// Firebase 모킹
jest.mock('./firebase', () => ({
  auth: {
    currentUser: null,
    signInWithEmailAndPassword: jest.fn(),
    signOut: jest.fn()
  },
  functions: jest.fn(),
  db: jest.fn()
}));

// 전역 모킹
global.ResizeObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn()
}));

// 에러 로깅 억제 (테스트 중)
const originalError = console.error;
beforeAll(() => {
  console.error = (...args: any[]) => {
    if (
      typeof args[0] === 'string' &&
      args[0].includes('Warning: ReactDOM.render is deprecated')
    ) {
      return;
    }
    originalError.call(console, ...args);
  };
});

afterAll(() => {
  console.error = originalError;
});
```

## 금지 사항

### ❌ 테스트 작성 금지
- 실제 API 호출하는 테스트
- 외부 의존성에 의존하는 테스트
- 구현 세부사항을 테스트하는 코드
- 테스트 간 의존성이 있는 테스트
- 비결정적(non-deterministic) 테스트

### ❌ 테스트 구조 금지
- 테스트 파일이 500라인을 초과하는 경우
- 단일 테스트 함수가 50라인을 초과하는 경우
- Mock 데이터를 하드코딩하는 경우
- 테스트 설명이 명확하지 않은 경우