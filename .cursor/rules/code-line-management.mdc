---
globs: *.ts,*.tsx,*.js,*.jsx,*.css,*.scss,*.py,*.html,*.htm
description: 코드 라인 유지 정책 및 모듈화 규칙
---

# 코드 라인 유지 정책

## 1. 기존 코드 재사용 (중복 방지 정책)

- 새로운 기능 구현 전 반드시 **기존 함수/클래스/모듈 확인**
- 동일/유사 기능이 이미 존재하면 **재사용**하거나 **개선**
- 같은 기능을 중복 작성하는 행위는 **금지**
- **중복 금지 체크리스트**: 신규 함수 작성 전 아래 항목 통과 필수
  - 코드베이스 전역 검색(이름/시그니처/설명어) 실시
  - 동일/유사 기능 발견 시 **재사용** 또는 **기존 함수 개선**으로 일원화
  - 재사용이 불가한 합당한 사유를 PR 설명에 명시

## 2. 파일 라인 수 관리

- 모든 코드 파일은 **400라인 이내 유지** (주석/공백 포함)
- 기능 **수정**은 기존 파일 내에서 허용 (450라인 경고, 500라인 절대 금지)
- 기능 **추가**는 **현재 350라인 넘을 시 새 파일 분리 + import 연결**이 원칙
- 권장: 250~300 라인 목표, 350 라인 경고(리뷰에서 분리 유도)

## 3. 모듈화 규칙

- 새로 만든 파일은 **단일 책임 원칙(SRP)** 준수
  - 한 파일 = 한 책임/기능
- 메인 파일은 각 모듈을 **불러와 조립하는 역할**만 수행
- 모듈 간 직접 참조는 최소화하고, 가능하면 **상위 메인 파일**을 통해 연결

## 4. 파일 네이밍 및 구조

- 파일명은 **책임/기능 기반**으로 작성
  - 예시: `auth_service.js`, `user_repository.py`, `button_styles.css`
- 임포트 규칙은 프로젝트 전반에서 일관되게 적용
- **절대경로 import**를 기본으로 사용
  - TypeScript: `@/components/...` 또는 절대 루트 별칭 사용
  - 상대경로(`../../..`)는 금지 (임시/로컬 테스트 제외)
- 인덱스 배럴 파일(`index.ts`) 남용 금지 (순환 의존 유발 주의)

## 5. 적용 대상 파일 확장자

- **JavaScript 계열**: `.js`, `.jsx`
- **TypeScript 계열**: `.ts`, `.tsx`
- **스타일 시트**: `.css`, `.scss`
- **파이썬**: `.py`
- **HTML/템플릿**: `.html`, `.htm`

(선택적으로 `.json`, `.yml`, `.md` 같은 설정/문서 파일에도 동일 원칙을 적용할 수 있음)

## 6. 적용 범위

- 신규 코드 작성 및 리팩토링 작업 모두에 **의무 적용**
- 코드 리뷰 시 위반 사항 발견 시 반드시 분리/정리 후 반영

## 7. SingMystage 프로젝트 특화 규칙

### 컴포넌트 분리 기준
- **Player 컴포넌트**: [Player.tsx](mdc:src/components/Player/Player.tsx) - 489라인으로 분리 필요
- **SidePanel 컴포넌트**: 기능별로 세분화 (ControlBox, ListBox, ProfileBox 등)
- **서비스 레이어**: [youtubeApi.ts](mdc:src/services/youtubeApi.ts), [favoritesService.ts](mdc:src/services/favoritesService.ts) 등

### 리팩토링 우선순위
1. 400라인 초과 파일 식별 및 분리 (현재 [Player.tsx](mdc:src/components/Player/Player.tsx) 489라인)
2. 중복 기능 통합 및 공통 모듈 생성
3. 타입 정의 중앙화 ([types/youtube.ts](mdc:src/types/youtube.ts) 확장)
4. 서비스 레이어 표준화
5. 절대경로 import로 전환 (상대경로 제거)

### 자동화 가드
- **라인 수 가드**: 350+ 라인 경고, 400+ 라인 실패
- **중복 탐지**: 유사 함수/파일 탐지 (jscpd, 정규식 스캔)
- **경로 별칭 검증**: 상대경로 import 탐지하여 실패 처리