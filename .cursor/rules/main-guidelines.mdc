---
alwaysApply: true
description: SingMystage 프로젝트의 메인 개발 가이드라인 및 우선순위
---

# SingMystage 메인 개발 가이드라인

## 프로젝트 개요
**SingMystage**: YouTube 기반 노래방 웹 애플리케이션  
**기술 스택**: React 19 + TypeScript + Firebase + YouTube API + Tailwind CSS  
**배포**: Netlify (프론트엔드) + Firebase Functions (백엔드)

## 핵심 개발 원칙

### 1. 코드 라인 유지 정책 (최우선)
- **400라인 이내**: 모든 코드 파일은 400라인 이내 유지
- **기존 코드 재사용**: 새로운 기능 구현 전 반드시 기존 함수/클래스/모듈 확인
- **모듈화**: 단일 책임 원칙(SRP) 준수, 기능별 파일 분리
- **중복 금지**: 같은 기능을 중복 작성하는 행위 절대 금지

### 2. 타입 안정성
- **TypeScript 필수**: 모든 컴포넌트와 서비스에 타입 정의
- **any 금지**: any 타입 사용 금지 (예외적으로 외부 라이브러리 연동 시에만 허용)
- **인터페이스 우선**: Props, API 응답, 상태에 대한 명확한 타입 정의

### 3. Firebase 연동 표준
- **한국 리전**: Firebase Functions는 `asia-northeast3` 리전 사용 필수
- **간접 호출**: YouTube API는 Firebase Functions를 통한 간접 호출만 허용
- **환경 변수**: 모든 Firebase 설정은 `REACT_APP_FIREBASE_*` 형식
- **에러 처리**: 한국어 에러 메시지 필수

### 4. 컴포넌트 아키텍처
- **Lazy Loading**: 주요 패널은 `React.lazy()` 사용 필수
- **상태 관리**: 상태는 최상위 컴포넌트에서 관리
- **Props 전달**: 명확한 타입 정의와 함께 props 전달
- **에러 바운더리**: 각 주요 컴포넌트에 에러 처리 구현

### 5. 스타일링 표준
- **Tailwind CSS**: 인라인 스타일 사용 금지, Tailwind CSS 클래스만 사용
- **네온 효과**: `text-neon-cyan`, `shadow-neon-cyan`, `animate-pulse-glow` 사용
- **다크 테마**: `bg-dark-bg`, `bg-dark-card` 클래스 활용
- **반응형**: 모바일 우선 설계 (`lg:` 접두사 활용)

## AI 의사결정 우선순위

### 1. 보안 (최우선)
- Firebase 규칙 및 환경 변수 보호
- 클라이언트에서 YouTube API 직접 호출 금지
- 사용자 인증 및 권한 관리

### 2. 성능
- Lazy Loading 및 메모이제이션 적용
- 이미지 최적화 및 지연 로딩
- 번들 크기 최적화

### 3. 사용자 경험
- 한국어 에러 메시지 및 로딩 상태 표시
- 반응형 디자인 및 접근성
- 직관적인 UI/UX

### 4. 유지보수성
- 컴포넌트 분리 및 타입 안정성
- 코드 재사용성 및 모듈화
- 테스트 코드 작성

## 금지 사항 (절대 금지)

### ❌ 보안 위반
- 클라이언트에서 YouTube API 직접 호출
- Firebase 환경 변수를 코드에 하드코딩
- 보안 규칙 없이 Firestore 사용

### ❌ 구조적 위반
- 400라인을 초과하는 파일 작성
- `src/components/` 외부에 컴포넌트 파일 배치
- TypeScript 타입 정의 생략
- 같은 기능을 중복 작성

### ❌ 스타일링 위반
- Tailwind를 무시한 인라인 스타일 사용
- Bootstrap, Material-UI 등 다른 UI 프레임워크 사용
- 반응형 설계 무시한 고정 크기 레이아웃

### ❌ 성능 위반
- 메모리 누수 가능한 이벤트 리스너 미정리
- 불필요한 리렌더링을 유발하는 코드
- 큰 이미지 파일을 압축 없이 사용

## 파일 수정 시 연동 규칙

### 1. Firebase 설정 변경 시
- [firebase.ts](mdc:src/firebase.ts) 수정 → [functions/index.js](mdc:functions/index.js) 리전 설정 확인 필요
- 환경 변수 변경 → Netlify 설정 동기화 필요

### 2. YouTube API 함수 변경 시
- [functions/index.js](mdc:functions/index.js) 수정 → [youtubeApi.ts](mdc:src/services/youtubeApi.ts) 호출 방식 확인
- 새 Functions 추가 → 클라이언트 서비스 업데이트 필요

### 3. 컴포넌트 구조 변경 시
- `src/components/` 변경 → [MainPage.tsx](mdc:src/pages/MainPage.tsx) import 확인
- Lazy Loading 추가 → Suspense 래퍼 확인

### 4. 타입 정의 동기화
- YouTube API 응답 → [types/youtube.ts](mdc:src/types/youtube.ts) 업데이트
- Firebase Functions 응답 → 클라이언트 타입 동기화
- 컴포넌트 Props → 타입 정의 필수

## 성능 최적화 체크리스트

### 필수 최적화
- [ ] React.lazy() 활용한 코드 스플리팅
- [ ] React.memo() 적절히 사용
- [ ] useMemo/useCallback으로 메모이제이션
- [ ] 이미지 지연 로딩 및 최적화
- [ ] 불필요한 라이브러리 제거

### 모니터링 설정
- [ ] Sentry 에러 추적 필수 설정
- [ ] Web Vitals 성능 메트릭 수집
- [ ] Firebase Analytics 사용자 행동 분석

## 테스트 표준

### 테스트 작성 필수
- 모든 서비스 함수에 대한 단위 테스트
- 주요 컴포넌트에 대한 통합 테스트
- 사용자 플로우에 대한 E2E 테스트

### 테스트 품질 기준
- 코드 커버리지 80% 이상
- 테스트 파일은 500라인 이내
- Mock 데이터를 통한 외부 의존성 격리

## 배포 워크플로우

### Netlify 배포 설정
- **빌드 명령**: `npm run build`
- **배포 디렉토리**: `build/`
- **Node.js 버전**: 18 이상
- **리다이렉트**: SPA를 위한 `/*` → `/index.html` 설정 필수

### Firebase Functions 별도 배포
- **명령**: `npm run deploy:functions`
- **리전**: 한국 리전 (`asia-northeast3`) 설정 유지

## 모호한 상황 처리

### Firebase vs Netlify 충돌
- **해결**: Netlify 프론트엔드, Firebase Functions 백엔드 유지

### 스타일링 선택
- **해결**: 항상 Tailwind CSS 우선, 커스텀 CSS 최소화

### API 처리
- **해결**: 직접 호출보다 Firebase Functions 경유 선택

---

**⚠️ 중요**: 이 가이드라인의 모든 규칙은 Netlify 배포 환경 최적화를 위해 설계되었습니다. Firebase Hosting 설정과 충돌하지 않도록 주의하여 적용하세요.

**🎯 목표**: 안정적이고 확장 가능한 YouTube 기반 노래방 웹 애플리케이션 구축