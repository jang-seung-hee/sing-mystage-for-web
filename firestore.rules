rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 공통 헬퍼
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function isAdmin() {
      return request.auth.uid in ['Iqp2Qb5KbrMuvCwjpzV6NViSa7i2'];
    }

    // users: 문서 ID = 사용자 UID
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    // user_settings: 문서 ID = 사용자 UID
    match /user_settings/{userId} {
      allow read, write: if isOwner(userId);
    }

    // favorites: 문서 ID는 랜덤, 소유권은 필드 uid로 판별
    match /favorites/{docId} {
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow read, update, delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }

    // favorite_folders: 문서 ID는 랜덤, 소유권은 필드 uid로 판별
    match /favorite_folders/{docId} {
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow read, update, delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }

    // recent_played: 문서 ID는 랜덤, 소유권은 필드 uid로 판별
    match /recent_played/{docId} {
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow read, update, delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }

    // 공유 즐겨찾기: 공개 읽기, 제한적 쓰기
    match /shared_favorites/{sharedId} {
      // 누구나 검색/열람 가능
      allow read: if true;

      // 생성: 작성자만 (authorId = uid)
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

      // 업데이트: 
      // - 소유자(작성자)는 전체 업데이트 가능
      // - 그 외 인증 사용자는 특정 필드에 한해 허용 (downloadCount, rating/ratingCount 증가)
      allow update: if isSignedIn() && (
        // 소유자 전체 수정 허용
        resource.data.authorId == request.auth.uid ||
        // 비소유자: 다운로드 카운트 +1만 허용
        (
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['downloadCount']) &&
          request.resource.data.downloadCount == resource.data.downloadCount + 1
        ) ||
        // 비소유자: 평점 추가만 허용 (rating은 +1..+5, ratingCount는 +1)
        (
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['rating','ratingCount']) &&
          request.resource.data.ratingCount == resource.data.ratingCount + 1 &&
          request.resource.data.rating >= resource.data.rating + 1 &&
          request.resource.data.rating <= resource.data.rating + 5
        )
      );

      // 삭제: 작성자만
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    // Functions에서 사용하는 rateLimits: 본인 문서만, 관리자는 전체 읽기 허용
    match /rateLimits/{userId} {
      allow create, update, delete: if isOwner(userId);
      allow read: if isOwner(userId) || (isSignedIn() && isAdmin());
    }

    // 기본: 명시되지 않은 경로는 거부
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
